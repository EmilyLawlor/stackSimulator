# Directory structure
.git - git repository
.idea - directory containing all project specific settings(created automatically by IntelliJ IDE)  
lib - junit and hamcrest jar files needed for junit testing with ant  
src - Simulator and Stack java classes  
testing - test class with JUnit methods to test stack functionalities  
text - directory containing all test files needed, i.e. manifest.txt  
build.xml - ant build file to deploy project  
simulator.bat - script file to run main class  
documentation - The JavaDoc comments will be generated into HTMl documentation by ant and will be stored in this folder  
out - directory generated by ant build will contain multiple directories:  
- bin - Main.jar, jar file created by ant containing all java classes need  
- classes - this will contain all the compiled classes
- JUnitTestReports - the reports for running the JUnit tests will be stored in this folder
  
# Branches
java - where all java implementation should be added  
testing - used to implement JUnit tests for the java classes  
documentation - all documentation, including JavaDoc comments, added on this branch  
driver Script - all bash scripting is done on this branch  
Build tools - ant build file which automates all main tasks of project

# Workflow
[HEAD logs](.git/logs/HEAD) - all commits made can be found in this file  
[Branch logs](.git/logs/refs/heads) - commits made to different branches stored in this directory (name of file matches 
    name of the branch)   
[Git log](text/log.txt) - log of all commits with date and commit message 



# Coding Conventions
follows the java coding conventions available at [oracle.com](https://www.oracle.com/technetwork/java/codeconventions-150003.pdf) 
introduced September 12, 1997, in the Java Language Specification 

# Build Command
build command from top-level of project directory:  
$ ant deployment(this will run all targets in build file)  
cd to project file created in users home directory  
$ "scripts/simulator.bat" <command sequence>  
example:  
$ "scripts/simulator.bat" push 1 push 2 push 3 show pop show   
OUTPUT:  
$ 3  
$ 2  
$ 1  
$   
$ 2  
$ 1  
$  

# AOB