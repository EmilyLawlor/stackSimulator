<?xml version="1.0"?>
<project name="Project" default="compress">

    <description>
        Build file for project
    </description>

    <property name="src-dir" value="src" description="java source files directory"/>
    <property name="test-dir" value="testing" description="JUnit test class directory"/>
    <property name="text-dir" value="text" description="text files directory"/>
    <property name="scripts-dir" value="scripts" description="driver script files directory"/>

    <property name="out" value="out" description="directory holding all outputs"/>
    <property name="classes-dir" value="out/classes" description="compiled classes directory"/>
    <property name="jar-dir" value="out/bin" description="jar directory"/>
    <property name="documentation-dir" value="documentation" description="all file generated from javadoc stored in this folder"/>

    <property name="lib" value="lib"/>

    <property name="home-dir" value="C\Users\emily" description="users home directory"/>

    <!-- include jars needed, e.g. JUnit, in class path -->
    <path id="classpath">
        <path location="lib">
            <fileset dir="lib">
                <include name="**/*.jar"/>
            </fileset>
        </path>
    </path>


    <!-- removes any intermediary files-->
    <target name="clean" description="removes all intermediary files">
        <delete dir="${out}"/>
        <delete dir="${documentation-dir}"/>
    </target>


    <!-- creates out directory and all subdirectories where anything generated by the build will be stored-->
    <target name="init" description="setting up directories needed for build">
        <mkdir dir="${out}"/>
        <mkdir dir="${classes-dir}"/>
        <mkdir dir="${jar-dir}"/>
        <mkdir dir="${documentation-dir}"/>
    </target>


    <!-- compiles both the Simulator and Stack classes and the Test class, stores compiled classes in ${classes-dir} -->
    <target name="compile" description="compile java files" depends="init">
        <javac srcdir="${src-dir}" destdir="${classes-dir}" description="compile Simulator and Stack java classes"
               includeantruntime="false"/>
        <javac classpathref="classpath" srcdir="${test-dir}" destdir="${classes-dir}" description="compile JUnit class"
               includeantruntime="false"/>
    </target>


    <!-- link to class path with has the JUnit  jar files needed and then runs all test methods -->
    <target name="JUnitTesting" description="run all junit tests" depends="compile">
        <mkdir dir="${out}/JUnitTestReports"/>

        <junit printsummary="yes" haltonfailure="yes">

            <classpath refid="classpath"/>
            <classpath location="${classes-dir}" />

            <formatter type="plain" usefile="false"/>
            <formatter type="xml"/>

            <batchtest todir="${out}/JUnitTestReports">
                <fileset dir="${classes-dir}" includes="**/*Test*.class"/>
            </batchtest>

        </junit>
    </target>


    <!-- Generate javadocs for current project into ${documentation-dir} -->
    <target name="JavaDoc" description="generate Javadoc documentation" depends="init">
        <javadoc sourcepath="${src-dir}" destdir="${documentation-dir}">
            <fileset dir="${src-dir}">
                <include name="**" />
            </fileset>
        </javadoc>
    </target>


    <!-- if build, testing, and documentation steps completed, java class are compressed into a jar file and stored in ${jar-dir} -->
    <target name="compress" description="creates .jar file for the project" depends="compile">
        <jar jarfile="${jar-dir}/Main.jar"
             manifest="${text-dir}/manifest"
             basedir="${classes-dir}"
             includes="*.class"/>
    </target>


    <!-- copies only the files needed to run the program to the users home directory -->
    <target name="copy" depends="compress" description="copies necessary files to users home directory">
        <copy todir="${home-dir}/project">
            <fileset dir="../Project">
                <include name="**/${scripts-dir}/*"/>
                <include name="**/${jar-dir}/*"/>
            </fileset>
        </copy>
    </target>


    <!-- deployment only goes ahead if building, testing and documentation steps successful, therefore depends on copy
     (compress and compile through this) and JavaDoc and JUnitTesting. Must only be deployed in a clean state, therefore
     depends on clean -->
    <target name="deployment" depends="clean, copy, JavaDoc, JUnitTesting">
        <tar destfile="${home-dir}/project.tgz" compression="gzip" >
            <tarfileset dir="${home-dir}/project">
                <include name="**" />
            </tarfileset>
        </tar>
    </target>


</project>
